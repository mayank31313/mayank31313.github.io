{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Control Net Official Portfolio . Introduction Welcome, I am excited to present ControlNet is a communication platform for devices like Raspberry Pi's that support python programming language. The purpose to build this platform is to connect various devices over a network(i.e private public network). Control Net Architecture is divided in 3 Projects IOR Control Net Tower IOR Socket Server IOR Video Streamer Getting Started Server Setup Docker Docker is a open platform to run apps in a container and seperate those apps from the infrastructure. You can install docker as per your platform needs from here Download Docker Compose File cd ~ mkdir controlnet-docker cd controlnet-docker wget https://mayank31313.github.io/docker/full/docker-compose.yml The above command will download docker-compose file in the current directory Run servers in Docker To run containers just run the below command in the docker-compose file directory, it will pull necessary images and start docker containers. docker-compose up To stop the containers, run below command docker-compose down Client (IOR-Python) The client code is available on this github repository Setup Client For this example no external configuration is needed, all the settings are predefined. The below example will only give a use case on the controlnet platform. git clone https://github.com/mayank31313/ior-python cd ior-python/examples python3 LatencyCheck.py ../config/from.json ../config/to.json Usage config = { \"server\": \"localhost\", \"httpPort\": 5001, \"socketServer\": \"localhost\", \"tcpPort\": 8000, #\"useSSL\": True # Optional } Create Instance of IOT Client from ior_research.IOTClient import IOTClientWrapper iot = IOTClientWrpper(token=token, config = config) #Creating object for IOT Client Setting up Receive Function to do some Operation when a response is received. iot.set_on_receive(lambda x: print(x)) Last but not the least start the IOTClient iot.start() iot.join() Quick Demo","title":"Home"},{"location":"#welcome-to-control-net","text":"Official Portfolio .","title":"Welcome to Control Net"},{"location":"#introduction","text":"Welcome, I am excited to present ControlNet is a communication platform for devices like Raspberry Pi's that support python programming language. The purpose to build this platform is to connect various devices over a network(i.e private public network). Control Net Architecture is divided in 3 Projects IOR Control Net Tower IOR Socket Server IOR Video Streamer","title":"Introduction"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#server","text":"","title":"Server"},{"location":"#setup-docker","text":"Docker is a open platform to run apps in a container and seperate those apps from the infrastructure. You can install docker as per your platform needs from here","title":"Setup Docker"},{"location":"#download-docker-compose-file","text":"cd ~ mkdir controlnet-docker cd controlnet-docker wget https://mayank31313.github.io/docker/full/docker-compose.yml The above command will download docker-compose file in the current directory","title":"Download Docker Compose File"},{"location":"#run-servers-in-docker","text":"To run containers just run the below command in the docker-compose file directory, it will pull necessary images and start docker containers. docker-compose up To stop the containers, run below command docker-compose down","title":"Run servers in Docker"},{"location":"#client-ior-python","text":"The client code is available on this github repository","title":"Client (IOR-Python)"},{"location":"#setup-client","text":"For this example no external configuration is needed, all the settings are predefined. The below example will only give a use case on the controlnet platform. git clone https://github.com/mayank31313/ior-python cd ior-python/examples python3 LatencyCheck.py ../config/from.json ../config/to.json","title":"Setup Client"},{"location":"#usage","text":"config = { \"server\": \"localhost\", \"httpPort\": 5001, \"socketServer\": \"localhost\", \"tcpPort\": 8000, #\"useSSL\": True # Optional }","title":"Usage"},{"location":"#create-instance-of-iot-client","text":"from ior_research.IOTClient import IOTClientWrapper iot = IOTClientWrpper(token=token, config = config) #Creating object for IOT Client","title":"Create Instance of IOT Client"},{"location":"#setting-up-receive-function-to-do-some-operation-when-a-response-is-received","text":"iot.set_on_receive(lambda x: print(x))","title":"Setting up Receive Function to do some Operation when a response is received."},{"location":"#last-but-not-the-least-start-the-iotclient","text":"iot.start() iot.join()","title":"Last but not the least start the IOTClient"},{"location":"#quick-demo","text":"","title":"Quick Demo"}]}