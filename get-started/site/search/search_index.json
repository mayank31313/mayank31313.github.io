{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to Control Net Official Portfolio . Introduction Welcome, I am excited to present ControlNet is a communication platform for devices like Raspberry Pi's that support python programming language. The purpose to build this platform is to connect various devices over a network(i.e private & public network). Each has a unique use-case. Control Net Architecture is divided in 3 Projects IOR Control Net Tower IOR Socket Server IOR Video Streamer Getting Started Server Setup Docker Docker is a open platform to run apps in a container and seperate those apps from the infrastructure. You can install docker as per your platform needs from here , we will also need Docker Compose which can be installed from this page . Download Docker Compose File cd ~ mkdir controlnet-docker cd controlnet-docker wget https://mayank31313.github.io/docker/full/docker-compose.yml The above command will download docker-compose file in the current directory Run servers in Docker To run containers just run the below command in the docker-compose file directory, it will pull necessary images and start docker containers. docker-compose up To stop the containers, run below command docker-compose down Client (IOR-Python) The client code is available on this github repository Setup Client For this example no external configuration is needed, all the settings are predefined. The below example will only give a use case on the controlnet platform. git clone https://github.com/mayank31313/ior-python cd ior-python/examples python3 LatencyCheck.py ../config/from.json ../config/to.json Usage config = { \"server\": \"localhost\", \"httpPort\": 5001, \"socketServer\": \"localhost\", \"tcpPort\": 8000, #\"useSSL\": True # Optional } Create Instance of IOT Client from ior_research.IOTClient import IOTClientWrapper iot = IOTClientWrpper(token=token, config = config) #Creating object for IOT Client Setting up Receive Function to do some Operation when a response is received. iot.set_on_receive(lambda x: print(x)) Last but not the least start the IOTClient iot.start() iot.join() Quick Demo","title":"Home"},{"location":"index.html#welcome-to-control-net","text":"Official Portfolio .","title":"Welcome to Control Net"},{"location":"index.html#introduction","text":"Welcome, I am excited to present ControlNet is a communication platform for devices like Raspberry Pi's that support python programming language. The purpose to build this platform is to connect various devices over a network(i.e private & public network). Each has a unique use-case. Control Net Architecture is divided in 3 Projects IOR Control Net Tower IOR Socket Server IOR Video Streamer","title":"Introduction"},{"location":"index.html#getting-started","text":"","title":"Getting Started"},{"location":"index.html#server","text":"","title":"Server"},{"location":"index.html#setup-docker","text":"Docker is a open platform to run apps in a container and seperate those apps from the infrastructure. You can install docker as per your platform needs from here , we will also need Docker Compose which can be installed from this page .","title":"Setup Docker"},{"location":"index.html#download-docker-compose-file","text":"cd ~ mkdir controlnet-docker cd controlnet-docker wget https://mayank31313.github.io/docker/full/docker-compose.yml The above command will download docker-compose file in the current directory","title":"Download Docker Compose File"},{"location":"index.html#run-servers-in-docker","text":"To run containers just run the below command in the docker-compose file directory, it will pull necessary images and start docker containers. docker-compose up To stop the containers, run below command docker-compose down","title":"Run servers in Docker"},{"location":"index.html#client-ior-python","text":"The client code is available on this github repository","title":"Client (IOR-Python)"},{"location":"index.html#setup-client","text":"For this example no external configuration is needed, all the settings are predefined. The below example will only give a use case on the controlnet platform. git clone https://github.com/mayank31313/ior-python cd ior-python/examples python3 LatencyCheck.py ../config/from.json ../config/to.json","title":"Setup Client"},{"location":"index.html#usage","text":"config = { \"server\": \"localhost\", \"httpPort\": 5001, \"socketServer\": \"localhost\", \"tcpPort\": 8000, #\"useSSL\": True # Optional }","title":"Usage"},{"location":"index.html#create-instance-of-iot-client","text":"from ior_research.IOTClient import IOTClientWrapper iot = IOTClientWrpper(token=token, config = config) #Creating object for IOT Client","title":"Create Instance of IOT Client"},{"location":"index.html#setting-up-receive-function-to-do-some-operation-when-a-response-is-received","text":"iot.set_on_receive(lambda x: print(x))","title":"Setting up Receive Function to do some Operation when a response is received."},{"location":"index.html#last-but-not-the-least-start-the-iotclient","text":"iot.start() iot.join()","title":"Last but not the least start the IOTClient"},{"location":"index.html#quick-demo","text":"","title":"Quick Demo"},{"location":"user_guide/client.html","text":"Client Configuration To be known words Device A unique ior-client process, that runs on the client device. These devices are seperated by unique device code in the given user context. Connection A connection is connectivity bridge between 2 clients, managed by the IOR-SocketServer. Before the target devices connect to server, a connection has be specified on the server side to get it to work. Connection Config After cloning this repository , the directory structure is a follows ./ior-python /config /from.json /from2.json /to.json /to2.json /iorConfigs.config These are the client connection config that are required by every client that connects to the IOR-SocketServer, and are very important. These files contains server and client related configs. These files can also be downloaded through Controlnet Frontend from connections section. But by default, these configuration files can be used to Quick Start the client application. Other than that iotConfig.config file is not the connection configuration, but has some external configuration that can be used by IOR Client. Lets go In this section we will create a and understand, how the connectivity and connection works in a device. When a socket server instance is created, it also creates a default user at the server side along with some devices and connections listed below: Device 1 - Master 1 (type = Raspberry Pi) Device 2 - Slave 1 (type = Raspberry Pi) Device 3 - Master 2 (type = Raspberry Pi) Device 4 - Slave 2 (type = Raspberry Pi) Master 1,2 and Slave 1,2 are just device name given, it doesn't mean that the only master can control the slave. The communication is bidirectional. After creating a device, the devices will not pair up to each other automatically, we will need to specify a connection between those. See below image. There are 2 connections already created Connection 1: Master 1 <--> Slave 1 Connection 2: Master 2 <--> Slave 2 After creating a connection, users can download the configuration file for each connecting device from the download button. These are required and important file, as they store client configurations. In the above section , we specified json files, these are the same connection file which store client configuration. from.json = Master 1 to.json = Slave 1 from.json = Master 2 to.json = Slave 2 These json files also help socket-server to authenticate. Whats Next There is more content to add.","title":"Client"},{"location":"user_guide/client.html#client-configuration","text":"","title":"Client Configuration"},{"location":"user_guide/client.html#to-be-known-words","text":"","title":"To be known words"},{"location":"user_guide/client.html#device","text":"A unique ior-client process, that runs on the client device. These devices are seperated by unique device code in the given user context.","title":"Device"},{"location":"user_guide/client.html#connection","text":"A connection is connectivity bridge between 2 clients, managed by the IOR-SocketServer. Before the target devices connect to server, a connection has be specified on the server side to get it to work.","title":"Connection"},{"location":"user_guide/client.html#connection-config","text":"After cloning this repository , the directory structure is a follows ./ior-python /config /from.json /from2.json /to.json /to2.json /iorConfigs.config These are the client connection config that are required by every client that connects to the IOR-SocketServer, and are very important. These files contains server and client related configs. These files can also be downloaded through Controlnet Frontend from connections section. But by default, these configuration files can be used to Quick Start the client application. Other than that iotConfig.config file is not the connection configuration, but has some external configuration that can be used by IOR Client.","title":"Connection Config"},{"location":"user_guide/client.html#lets-go","text":"In this section we will create a and understand, how the connectivity and connection works in a device. When a socket server instance is created, it also creates a default user at the server side along with some devices and connections listed below: Device 1 - Master 1 (type = Raspberry Pi) Device 2 - Slave 1 (type = Raspberry Pi) Device 3 - Master 2 (type = Raspberry Pi) Device 4 - Slave 2 (type = Raspberry Pi) Master 1,2 and Slave 1,2 are just device name given, it doesn't mean that the only master can control the slave. The communication is bidirectional. After creating a device, the devices will not pair up to each other automatically, we will need to specify a connection between those. See below image. There are 2 connections already created Connection 1: Master 1 <--> Slave 1 Connection 2: Master 2 <--> Slave 2 After creating a connection, users can download the configuration file for each connecting device from the download button. These are required and important file, as they store client configurations. In the above section , we specified json files, these are the same connection file which store client configuration. from.json = Master 1 to.json = Slave 1 from.json = Master 2 to.json = Slave 2 These json files also help socket-server to authenticate.","title":"Lets go"},{"location":"user_guide/client.html#whats-next","text":"There is more content to add.","title":"Whats Next"},{"location":"user_guide/server.html","text":"Server Setup and Configuration As discuss on this page , control net depends upon 3 Application. On this page we will discuss those 3 Apps in detail. The Application Servers Control Net Tower The Server handles all the REST API requests which deals with User, Devices and Connections. The Authentication used is JWT Token Authentication. Using the server api, we can manage user, client and connections. Click here for Docker Image Socket Server (Tunnel Server) This server uses TCP Sockets to communicate. The server connects client across each other. The server is also responsible for handling the socket message. It uses AES Encryption with the Connection Key, but is partially encrypted means the messages are decrypted at the server side. But this limitation will be removed in the future builds. Click here for Docker Image Video Streamer This server is used create a Video Live Stream from a device to end user, it uses WebRTC behind the scenes. Connecting to the server requires JWT Token which can be created through Control Net Tower and the stream can be watch on the Control Net Frontend -> Sign In -> Video Streaming (On Left Drawer), for current build you can stream only 1 Device at a time. Click here for Docker Image Additional Features The Streamer can also be used for Computer Vision and Machine Learning can be also implemented. Users can implement CNN architecture as per the use case.","title":"Server"},{"location":"user_guide/server.html#server-setup-and-configuration","text":"As discuss on this page , control net depends upon 3 Application. On this page we will discuss those 3 Apps in detail.","title":"Server Setup and Configuration"},{"location":"user_guide/server.html#the-application-servers","text":"","title":"The Application Servers"},{"location":"user_guide/server.html#control-net-tower","text":"The Server handles all the REST API requests which deals with User, Devices and Connections. The Authentication used is JWT Token Authentication. Using the server api, we can manage user, client and connections. Click here for Docker Image","title":"Control Net Tower"},{"location":"user_guide/server.html#socket-server-tunnel-server","text":"This server uses TCP Sockets to communicate. The server connects client across each other. The server is also responsible for handling the socket message. It uses AES Encryption with the Connection Key, but is partially encrypted means the messages are decrypted at the server side. But this limitation will be removed in the future builds. Click here for Docker Image","title":"Socket Server (Tunnel Server)"},{"location":"user_guide/server.html#video-streamer","text":"This server is used create a Video Live Stream from a device to end user, it uses WebRTC behind the scenes. Connecting to the server requires JWT Token which can be created through Control Net Tower and the stream can be watch on the Control Net Frontend -> Sign In -> Video Streaming (On Left Drawer), for current build you can stream only 1 Device at a time. Click here for Docker Image","title":"Video Streamer"},{"location":"user_guide/server.html#additional-features","text":"The Streamer can also be used for Computer Vision and Machine Learning can be also implemented. Users can implement CNN architecture as per the use case.","title":"Additional Features"}]}